
local util = require "main.framework.utilities"
local collis = require "main.framework.collision_module"
local input = require "main.framework.input_globals"
local render_transform = require "main.render.render_transform"
local fileman = require "main.file_manager"

local fileExt = "convexshape"

local vertfact = "#vertfact"
local segfact = "#segfact"

local has_mouse = true
local hoverobj = nil
local vert_collis_radius = 8
local drag = {on = false, obj = nil, i = 0, offset = vmath.vector3()}
local cursor = "cursor/cursor#gui"

local debugcolor = vmath.vector4(1, 1, 0, 1)
local debugcolor2 = vmath.vector4(0.1, 0.5, 1, 1)
local white = vmath.vector4(1)
local concave_color = vmath.vector4(1, 0, 0, 1)


--########################################  Init  ########################################
function init(self)
	-- input focus given and taken away by input_manager.script
	self.verts = {}
	self.segs = {}
	self.curi = 0
	self.concave_verts = {}
end

--########################################  Add Point  ########################################
function add_point(self, pos, index)
	local idx = index or self.curi + 1 -- index will be specified if dividing a segment
	self.curi = self.curi + 1 -- we're gaining a new point regardless so increment the "last" vert index
	spawn_vert_obj(self, pos, idx)
	local vertcount = table.maxn(self.verts)

	if idx == 1 then
		-- no other verts, don't need to spawn any segments
	elseif idx == 2 and idx == vertcount then
		spawn_seg(self, util.previ(self.verts, idx))
	elseif idx == 3 and idx == vertcount then
		-- original third vert, need to spawn closing segment
		spawn_seg(self, util.previ(self.verts, idx)) -- spawn segment starting at index 2
		spawn_seg(self, idx) -- at index 3, this is current lastseg
	elseif idx == vertcount then
		spawn_seg(self, util.previ(self.verts, idx))
		-- displacing lastseg, so move it and notify it to update
		go.set_position(pos, self.segs[table.maxn(self.segs)])
		msg.post(self.segs[table.maxn(self.segs)], "changed")
	else
		-- this point is between other points
		go.set(util.prevval(self.segs, idx), "endpt", pos)
		msg.post(util.prevval(self.segs, idx), "changed") -- update last segment to end at this point
		spawn_seg(self, idx) -- spawn new segment starting at this point
	end
	update_indices(self)
end

--########################################  Delete Point  ########################################
function delete_point(self, index)
	local maxi = table.maxn(self.verts)
	go.delete(self.verts[index])
	table.remove(self.verts, index)
	self.curi = self.curi - 1

	if maxi == 2 then -- only two verts, only one segment
		go.delete(self.segs[1])
		table.remove(self.segs, 1)
	elseif maxi == 3 then -- three verts & segments, must delete two segments
		go.delete_all({self.segs[index], util.prevval(self.segs, index)})
		table.remove(self.segs, index)
		table.remove(self.segs, util.previ(self.segs, index))
	elseif maxi > 3 then
		go.delete(self.segs[index])
		table.remove(self.segs, index)
		local prevsegurl = util.scripturl(util.prevval(self.segs, index))
		go.set(prevsegurl, "endpt", go.get_position(util.nextval(self.verts, util.previ(self.verts, index))))
		msg.post(prevsegurl, "changed")
	end
	update_indices(self)
end

--########################################  Clear Polygon  ########################################
function clear_polygon(self)
	for i, v in ipairs(self.verts) do
		go.delete(v)
		self.verts[i] = nil
	end
	for i, v in ipairs(self.segs) do
		go.delete(v)
		self.segs[i] = nil
	end
	for i, v in ipairs(self.concave_verts) do
		self.concave_verts[i] = nil
	end
	self.curi = 0
	hoverobj = nil
	drag.on = false
end

--########################################  Spawn Vert Obj  ########################################
function spawn_vert_obj(self, pos, index)
	local vert = factory.create(vertfact, pos, nil, {i = index}, vmath.vector3(render_transform.zoom))
	table.insert(self.verts, index, vert)
	return vert
end

--########################################  Spawn Seg  ########################################
function spawn_seg(self, startindex)
	local pos = go.get_position(self.verts[startindex])
	local endpos = go.get_position(util.nextval(self.verts, startindex))
	local vect = vmath.vector3(endpos - pos)
	local props = {
		i = startindex,
		endpt = endpos,
		vect = vect,
		normvect = vmath.normalize(vect),
		length = vmath.length(vect)
	}
	local seg = factory.create(segfact, pos, util.vect_to_quat(vect), props, vmath.vector3(1, render_transform.zoom, 1))
	table.insert(self.segs, startindex, seg)
end

--########################################  Update Indices  ########################################
function update_indices(self)
	for i, v in ipairs(self.verts) do msg.post(v, "set i", {index = i}) end
	for i, v in ipairs(self.segs) do msg.post(v, "set i", {index = i}) end
	if table.maxn(self.segs) > 2 then
		msg.post(self.segs[table.maxn(self.segs)], "last segment")
	end
	check_poly_convex(self)
end


--########################################  Moved Vert Update  ########################################
function update_dragged_vert(self, index, pos)
	if self.segs[index] then
		go.set_position(pos, self.segs[index])
		msg.post(self.segs[index], "changed")
	end
	local prev_index = util.previ(self.segs, index)
	if prev_index ~= 0 and index ~= prev_index then
		local url = util.scripturl(self.segs[prev_index])
		go.set(url, "endpt", pos)
		msg.post(self.segs[prev_index], "changed")
	end
	check_poly_convex(self)
end

--########################################  Set Concave Vert  ########################################
local function set_concave_vert(self, i, vert)
	go.set(msg.url(nil, vert, "sprite"), "tint", concave_color)
	table.insert(self.concave_verts, vert)
end

--########################################  Un-set Concave Vert  ########################################
local function unset_concave_vert(self, vert)
	go.set(msg.url(nil, vert, "sprite"), "tint", white)
end

--########################################  Check Poly Convex  ########################################
function check_poly_convex(self)
	-- Reset any previously concave verts
	for i=#self.concave_verts, 1, -1 do
		unset_concave_vert(self, self.concave_verts[i])
		self.concave_verts[i] = nil
	end

	if #self.verts > 3 then
		-- Get and store angle at each vert
		local anglesigns = {}
		for i, v in ipairs(self.verts) do
			local vec1 = go.get(util.scripturl(util.prevval(self.segs, i)), "normvect")
			local vec2 = go.get(util.scripturl(self.segs[i]), "normvect")
			local a = math.atan2(vec2.y, vec2.x) - math.atan2(vec1.y, vec1.x)
			if a > math.pi then a = a - math.pi*2 -- if the computed angle is more than 180 in either direction, flip it
			elseif a < -math.pi then a = a + math.pi*2
			end
			if a >= 0 then anglesigns[i] = 1
			else anglesigns[i] = -1
			end
		end

		-- Add up the signs of all verts to figure the direction of the majority of verts
		local totalsign = 0
		for i, v in ipairs(anglesigns) do totalsign = totalsign + v end
		local dir = 1
		if totalsign < 0 then dir = -1 end

		-- If not all verts are convex in the majority direction, highlight the concave verts
		if math.abs(totalsign) < (#self.verts) then
			for i, v in ipairs(anglesigns) do
				if v ~= dir then
					set_concave_vert(self, i, self.verts[i])
				end
			end
		end
	end
end

--########################################  Update  ########################################
function update(self, dt)
	if has_mouse then
		if drag.on and drag.obj then
			go.set_position(input.mouse_wpos + drag.offset, drag.obj)
			update_dragged_vert(self, drag.i, input.mouse_wpos + drag.offset)
			-- don't check for other collisions if dragging
		else
			-- Cursor world collision check
			local dist = 1000
			local lasthoverobj = hoverobj
			hoverobj = nil
			for i, v in ipairs(self.verts) do
				local hitdist = collis.collide_circle_circle(
					go.get_position(v),
					vert_collis_radius * render_transform.zoom,
					input.mouse_wpos,
					render_transform.zoom
				)
				if not hitdist and v == lasthoverobj then
					msg.post(v, "mouse exit")
				elseif hitdist and hitdist < dist then
					if lasthoverobj then
						msg.post(lasthoverobj, "mouse exit")
					end
					lasthoverobj = v
					msg.post(v, "mouse enter")
					hoverobj = v
					dist = hitdist
				end
			end
		end
	end
end

--########################################  On Input  ########################################
function on_input(self, action_id, action)
	-- left click events consumed by the interface if the mouse is over a button
	if action.pressed then
		if action_id == hash("left click") then
			if hoverobj then
				if input.alt_pressed then
					delete_point(self, go.get(util.scripturl(hoverobj), "i"))
				else
					msg.post(hoverobj, "drag start")
					drag.on = true
					drag.obj = hoverobj
					drag.i = go.get(util.scripturl(hoverobj), "i")
					if input.shift_pressed then
						drag.offset = vmath.vector3()
					else
						drag.offset = vmath.vector3(go.get_position(hoverobj) - input.mouse_wpos)
					end
					msg.post(cursor, "drag offset", {offset = drag.offset})
				end
			elseif input.ctrl_pressed then
				add_point(self, input.mouse_wpos)
			end
		elseif action_id == hash("shift") then
			if drag.on then
				drag.offset = vmath.vector3()
				msg.post(cursor, "drag offset", {offset = drag.offset})
			end
		end
	elseif action.released then
		if action_id == hash("left click") then
			if hoverobj then
				drag.on = false
				drag.offset = vmath.vector3()
				msg.post(hoverobj, "drag end")
				msg.post(cursor, "drag offset", {offset = drag.offset})
			end
		end
	end
end

--########################################  On Message  ########################################
function on_message(self, message_id, message, sender)
	if message_id == hash("gained mouse") then
		has_mouse = true
	elseif message_id == hash("lost mouse") then
		has_mouse = false
		if hoverobj then msg.post(hoverobj, "mouse exit") end
		if drag.on then
			drag.on = false
			msg.post(drag.obj, "drag end")
			msg.post(cursor, "drag offset", {offset = drag.offset})
		end
	elseif message_id == hash("clear polygon") then
		clear_polygon(self)

	elseif message_id == hash("zoom") then
		local z = render_transform.zoom
		for i, v in ipairs(self.verts) do
			go.set_scale(z, v)
		end
		for i, v in ipairs(self.segs) do
			go.set(v, "scale.y", z)
		end
	elseif message_id == hash("open polygon") then
		local path = fileman.get_open_path()
		if path then
			fileman.baseDialogPath = fileman.get_path_dir(path)
			local pointarray = fileman.open_polygon(path)
			for i, v in ipairs(pointarray) do
				add_point(self, v)
			end
		end
	elseif message_id == hash("save polygon") then
		if #self.verts < 3 then
			msg.post("#gui", "display message", {text = "Need at least 3 verts to make a polygon"})
		elseif #self.verts > 16 then
			msg.post("#gui", "display message", {text = "Polygons with more than 16 verts are not supported by Defold."})
		else
			local path = fileman.get_save_path()
			if path then
				path = fileman.ensure_file_extension(path)
				fileman.baseDialogPath = fileman.get_path_dir(path)
				local pointarray = {}
				for i, v in ipairs(self.verts) do table.insert(pointarray, go.get_position(v)) end
				fileman.save_polygon(path, unpack(pointarray))
			end
		end
	end
end
