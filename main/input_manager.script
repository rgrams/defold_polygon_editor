
local util = require "main.framework.utilities"
local input = require "main.framework.input_globals"
local render_transform = require "main.render.render_transform"

local mouse_wpos = vmath.vector3()
local last_mouse_wpos = vmath.vector3()
local mouse_spos = vmath.vector3()
local campos = vmath.vector3()

Snap_Increment = 5 -- Global.
local panning = false

local cursor = "cursor/cursor#gui"
local editor = "#editor"
local interface = "#gui"


--########################################  Init  ########################################
function init(self)
	msg.post(editor, "acquire_input_focus")
	msg.post("#gui", "acquire_input_focus")
	msg.post(".", "acquire_input_focus")

	local window_x = tonumber(sys.get_config("display.width"))
	local window_y = tonumber(sys.get_config("display.height"))
	render_transform.set_window_res(window_x, window_y)
	msg.post(cursor, "window resized", {size = vmath.vector3(window_x, window_y, 0)})

	window.set_listener(windowevent)
end

--########################################  Window Event  ########################################
function windowevent(self, event, data)
	if event == window.WINDOW_EVENT_RESIZED then
		msg.post(cursor, "window resized", {size = vmath.vector3(data.width, data.height, 0)})
	end
end

--########################################  Update Mousepos  ########################################
function update_mousepos(dx, dy)
	-- If dx (and dy) passed in and panning, do pan before mouse pos may be snapped to the grid
	-- Called without dx and dy when zooming
	if panning and dx then
		-- need new wpos to get correct panning vect, but shouldn't allow cursor wpos to change
		local last_mouse_wpos = render_transform.screen_to_world(mouse_spos.x - dx, mouse_spos.y - dy)
		local new_mouse_wpos = render_transform.screen_to_world(mouse_spos.x, mouse_spos.y)
		campos = campos - (new_mouse_wpos - last_mouse_wpos)
		go.set_position(campos, "camera")
	else
		mouse_wpos = render_transform.screen_to_world(mouse_spos.x, mouse_spos.y)
	end

	if input.shift_pressed then
		mouse_wpos.x = util.round(mouse_wpos.x / Snap_Increment) * Snap_Increment
		mouse_wpos.y = util.round(mouse_wpos.y / Snap_Increment) * Snap_Increment
		-- refigure screen pos from snapped world pos
		mouse_spos = render_transform.world_to_screen(mouse_wpos)
	end
	msg.post(cursor, "update pos", {wpos = mouse_wpos})
	input.mouse_wpos = mouse_wpos
end

--########################################  On Input  ########################################
function on_input(self, action_id, action)
		-- Mouse Movement
	if action_id == nil then
		mouse_spos.x = action.screen_x
		mouse_spos.y = action.screen_y
		update_mousepos(action.screen_dx, action.screen_dy)

	elseif action.pressed then
		if action_id == hash("control") then
			input.ctrl_pressed = true
		elseif action_id == hash("alt") then
			input.alt_pressed = true
		elseif action_id == hash("shift") then
			input.shift_pressed = true
		elseif action_id == hash("save") and input.ctrl_pressed then
			msg.post("#editor", "save polygon")
		elseif action_id == hash("open") and input.ctrl_pressed then
			if input.shift_pressed then
				msg.post(interface, "open overlay image")
			else
				msg.post(editor, "open polygon")
			end
		elseif action_id == hash("mouse wheel up") then
			render_transform.zoom = render_transform.zoom * 0.9
			update_mousepos()
			msg.post(editor, "zoom")
		elseif action_id == hash("mouse wheel down") then
			render_transform.zoom = render_transform.zoom / 0.9
			update_mousepos()
			msg.post(editor, "zoom")
		elseif action_id == hash("middle click") then
			panning = true
		end

	elseif action.released then
		if action_id == hash("control") then
			input.ctrl_pressed = false
		elseif action_id == hash("alt") then
			input.alt_pressed = false
		elseif action_id == hash("shift") then
			input.shift_pressed = false
		elseif action_id == hash("middle click") then
			panning = false
		end
	end
end

--########################################  Final  ########################################
function final(self)
	msg.post(editor, "release_input_focus")
	msg.post("#gui", "release_input_focus")
	msg.post(".", "release_input_focus")
end
