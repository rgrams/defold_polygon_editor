
local ui = require "main.interface.interface_module"
local util = require "main.framework.utilities"
local input = require "main.framework.input_globals"
local fileman = require "main.file_manager"

local messageNode
local messageDuration = 5

local btn_node_names = {
	"open btn", "clear btn", "save btn",
	"load overlay btn", "toggle overlay btn",
	"snap + btn", "snap - btn",
	"quit btn",
}
local html_exclude_btn_names = {
	["open btn"] = true,
	["load overlay btn"] = true,
	["quit btn"] = true,
}
local html_btn_node_names = {}
for i,name in ipairs(btn_node_names) do
	if not html_exclude_btn_names[name] then
		table.insert(html_btn_node_names, name)
	end
end

local active_buttons = {}
local cur_hover_btn = nil

local btns = {}

local btn_funcs = { -- Keyed by node names.
	["open btn"] = function()
		msg.post("#editor", "open polygon")
	end,
	["clear btn"] = function()
		msg.post("#editor", "clear polygon")
	end,
	["save btn"] = function()
		msg.post("#editor", "save polygon")
	end,
	["load overlay btn"] = function()
		local path = fileman.get_open_path()
		if path then
			fileman.baseDialogPath = fileman.get_path_dir(path)
			msg.post("main#overlay", "load image", {image_path = path})
		end
	end,
	["toggle overlay btn"] = function()
		msg.post("main#overlay", "toggle")
	end,
	["snap + btn"] = function()
		Snap_Increment = Snap_Increment + 1
		local node = gui.get_node("snap to label")
		gui.set_text(node, "snap to: " .. Snap_Increment .. "px")
	end,
	["snap - btn"] = function()
		Snap_Increment = Snap_Increment - 1
		local node = gui.get_node("snap to label")
		gui.set_text(node, "snap to: " .. Snap_Increment .. "px")
	end,
	["quit btn"] = function()
		msg.post("@system:", "exit", {code = 0})
	end,
}


--########################################  Init  ########################################
function init(self)
	gui.set_render_order(1)

	self.myurl = msg.url()
	local controls_text = "ctrl-click: add point -- left-click drag: move point -- alt-click: delete point\nshift: snap to grid -- mouse wheel: zoom -- middle mouse drag: pan"

	local btn_names = btn_node_names

	-- remove buttons that should not be available in HTML5
	if sys.get_sys_info().system_name == "HTML5" then
		btn_names = html_btn_node_names
		for name,_ in pairs(html_exclude_btn_names) do
			gui.delete_node(gui.get_node(name))
		end
		controls_text = controls_text .. "\ndrag'n'drop: set .png or .jpg overlay image"
	end

	-- set up buttons
	for i, name in ipairs(btn_names) do
		local button = ui.newbutton(name, gui.get_node(name), self.myurl, btns)
		button:set_active(true)
		button.releasefunc = btn_funcs[name]
	end

	gui.set_text(gui.get_node("controls text"), controls_text )
	messageNode = gui.get_node("message text")
end

--########################################  On Input  ########################################
function on_input(self, action_id, action)
	-- input focus given and taken away by input_manager.script
	if action_id == nil then
		for i, v in ipairs(active_buttons) do
			ui.update_button(btns[v], action.x, action.y)
		end

	elseif action_id == hash("left click") then
		if cur_hover_btn then
			if action.pressed and btns[cur_hover_btn].press then btns[cur_hover_btn]:press()
			elseif action.released and btns[cur_hover_btn].release then btns[cur_hover_btn]:release()
			end
			return true -- consume event
		end
	end
end

--########################################  Display Message  ########################################
local function display_message(text)
	gui.cancel_animation(messageNode, "color")
	gui.set_text(messageNode, text)
	gui.set_color(messageNode, vmath.vector4(1))
	gui.animate(messageNode, "color.w", 0, gui.EASING_INSINE, messageDuration)
end

--########################################  On Message  ########################################
function on_message(self, message_id, message, sender)

	if message_id == hash("button hovered") then
		if not cur_hover_btn then
			msg.post("main#editor", "lost mouse")
		end
		cur_hover_btn = message.btn

	elseif message_id == hash("button unhovered") then
		if cur_hover_btn == message.btn then
			cur_hover_btn = nil
			msg.post("main#editor", "gained mouse")
		end

	elseif message_id == hash("button activated") then
		table.insert(active_buttons, message.btn)

	elseif message_id == hash("button deactivated") then
		util.find_remove(active_buttons, message.btn)
		if cur_hover_btn == message.btn then cur_hover_btn = nil end

	elseif message_id == hash("display message") then
		display_message(message.text)
	end
end
